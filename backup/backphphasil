<?php
require_once 'includes/auth_check.php';
require_once 'config/database.php';

// Process form data
$investasi1 = htmlspecialchars(trim($_POST['investasi1']));
$investasi2 = htmlspecialchars(trim($_POST['investasi2']));
$kategori = $_POST['investment_purpose'] ?? 'future';

// Determine investment purpose text
$purposeText = match($kategori) {
    'future' => 'Kebutuhan Masa Depan',
    'cold_money' => 'Investasi Uang Dingin',
    'inflation' => 'Melawan Inflasi',
    default => 'Kebutuhan Masa Depan'
};

// Default weights and values
$defaultWeights = [
    'return' => 0.4,
    'risk' => 0.3,
    'liquidity' => 0.3
];

$defaultValues = [
    'investasi1' => [
        'return' => 0,
        'risk' => 0,
        'liquidity' => 0
    ],
    'investasi2' => [
        'return' => 0,
        'risk' => 0,
        'liquidity' => 0
    ]
];

// Get weights and values
$weights = [
    'return' => (float)($_POST['bobot']['return'] ?? $defaultWeights['return']),
    'risk' => (float)($_POST['bobot']['risk'] ?? $defaultWeights['risk']),
    'liquidity' => (float)($_POST['bobot']['liquidity'] ?? $defaultWeights['liquidity'])
];

$values = [
    'investasi1' => [
        'return' => (float)($_POST['nilai']['return'][1] ?? $defaultValues['investasi1']['return']),
        'risk' => (float)($_POST['nilai']['risk'][1] ?? $defaultValues['investasi1']['risk']),
        'liquidity' => (int)($_POST['nilai']['liquidity'][1] ?? $defaultValues['investasi1']['liquidity'])
    ],
    'investasi2' => [
        'return' => (float)($_POST['nilai']['return'][2] ?? $defaultValues['investasi2']['return']),
        'risk' => (float)($_POST['nilai']['risk'][2] ?? $defaultValues['investasi2']['risk']),
        'liquidity' => (int)($_POST['nilai']['liquidity'][2] ?? $defaultValues['investasi2']['liquidity'])
    ]
];

// Determine criteria types based on investment purpose
$criteriaTypes = match($kategori) {
    'future' => [
        'return' => 'benefit',
        'risk' => 'cost',
        'liquidity' => 'benefit'
    ],
    'cold_money' => [
        'return' => 'benefit',
        'risk' => 'benefit',
        'liquidity' => 'cost'
    ],
    'inflation' => [
        'return' => 'benefit',
        'risk' => 'cost',
        'liquidity' => 'benefit'
    ],
    default => [
        'return' => 'benefit',
        'risk' => 'cost',
        'liquidity' => 'benefit'
    ]
};

// Function to normalize values
function normalizeValue($value, $type) {
    if ($type === 'cost') {
        return 1 / max($value, 0.0001); // Avoid division by zero
    }
    return $value;
}

// Calculate WPM scores
$wpm1 = 1;
$wpm2 = 1;

foreach ($weights as $criterion => $weight) {
    $type = $criteriaTypes[$criterion];
    
    // Normalize values
    $norm1 = normalizeValue($values['investasi1'][$criterion], $type);
    $norm2 = normalizeValue($values['investasi2'][$criterion], $type);
    
    // Apply weighted product
    $wpm1 *= pow($norm1, $weight);
    $wpm2 *= pow($norm2, $weight);
}

// Calculate total score
$total = $wpm1 + $wpm2;

// Handle division by zero
if ($total < 0.0000001) {
    $percentage1 = 50;
    $percentage2 = 50;
} else {
    $percentage1 = ($wpm1 / $total) * 100;
    $percentage2 = ($wpm2 / $total) * 100;
}

// Determine winner
$winner = $percentage1 > $percentage2 ? $investasi1 : $investasi2;
$winnerPercentage = max($percentage1, $percentage2);

// Save to database if requested
if (isset($_POST['save'])) {
    try {
        $stmt = $pdo->prepare("
            INSERT INTO perbandingan 
            (id_user, nama_investasi_1, nama_investasi_2, winner, kategori_perbandingan, tanggal) 
            VALUES (?, ?, ?, ?, ?, NOW())
        ");
        
        $stmt->execute([
            $_SESSION['user_id'],
            $investasi1,
            $investasi2,
            $winner,
            $purposeText
        ]);
        
        $_SESSION['success'] = "Perbandingan berhasil disimpan!";
        header('Location: dashboard.php');
        exit;
    } catch (PDOException $e) {
        $_SESSION['error'] = "Gagal menyimpan perbandingan: " . $e->getMessage();
        header('Location: hasil.php');
        exit;
    }
}